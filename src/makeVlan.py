#-----------------------------------------------------
#--  Génération de configuration de routeur Mikrotik
#--  
#--   structure du fichier json
#--  {
# --     "psw" : mot de passe du routeur
#--      "wireguardAdd": adresse interface wireguard,
#--      "trunkName": nom du bridge (defaut trunk),
#--      "name": nom du routeur,
#--      "ports": tableau des ports physiques rattaché au trunk (ex. ["ether4","ether5","ether3"]),
#--      "dsn": liste des dns a utiliser (@ip uniquement defaut "8.8.8.8"),
#--      "ipPoolStart": debut du pool "local", la fin est broadcast-1 (defaut 192.168.87.30)
#--      "mngtVlan": id du vlan défaut=-1> conserver l'existant,
#--      "vlans": tableau des vlans a créer
#--      [
#--          {
#--             "name": nom du vlan "commun", 
#--             "id": id du vlan 6,
#--             "dns": écrase le dns,
#--             "ipPoolStart": ip permettant de déterminer la 1er 
#--                             adresse du pool de d'ip dhcp racine 
#--                             défaut : 192.168.<id>.30
#--             "allowedInterface" : tableau des interfaces avec lesquelles ce VLAN peut communiquer 
#--                                  typiquement un autre vlan
#--             "allowedInterfaceList" : tableau des listes d'interfaces avec lesquelles ce VLAN peut communiquer
#--                                      défaut : WAN pour accès internet
#--          },
#--      ]
#--  }
#--  
#--  
#-----------------------------------------------------


from io import TextIOWrapper
import ipaddress
import json
from datetime import datetime
import commun
import os


trunkName:str="trunk"
f:TextIOWrapper=None
comment:str=""


def main():
    descriptorFn = commun.getArgv("-process", '/home/oec/DEV/Mikrotik/private/routeurServeur.json')
    if ( len(descriptorFn) == 0 ):
        print("-process is mandatory")
        return
    fn = commun.getArgv("-toFile", '')
    if ( len(fn) == 0 ):
        fn, ext = os.path.splitext(descriptorFn)
        fn = fn + '.rsc'
        print("result will be writen to %s" % (fn) )

    global comment
    comment = commun.getArgv("-comment", "ohmi")


    descriptor = commun.dataLoad(descriptorFn)
    if ( len(descriptor) == 0 ):
        print("file %s is empty" % (descriptorFn) )
        return

    j = json.loads(descriptor)
    global trunkName
    trunkName = j["trunkName"]

    global f
    f = open(fn, 'w')


    cartouche(descriptorFn)

    ipPoolstart=""
    if "ipPoolStart" in j:
        ipPoolstart=j["ipPoolStart"]
    else:
        ipPoolstart="192.168.87.30"
    setLan(ipPoolstart)


    dns=[]
    if "dns" in j:
        for a in j["dns"]:
            dns.append(a)
    else:
        dns=["8.8.8.8"]

    wireguardAdd=""
    if "wireguardAdd" in j:
        wireguardAdd=j["wireguardAdd"]
    else:
        wireguardAdd="10.10.0.1"


    setBasis(name=j["name"], psw=j["psw"])

    setWireguard(wireguardAdd=wireguardAdd)

    ports=[]
    if "ports" not in j:
        print('tag "ports" is mandatory')
        return

    for port in j["ports"]:
        ports.append(port)

    if "mngtVlan" not in j:
        mngtVlan = -1
    else:
        mngtVlan = int(j["mngtVlan"])

    for vlan in j["vlans"]:

        # list of interface
        allowedList=[]
        if "allowedInterface" in vlan:
            allowedList=[]
            for a in vlan["allowedInterface"]:
                allowedList.append(a)

        # list of interface list
        allowedListList=[]
        if "allowedInterfaceList" in vlan:
            for a in vlan["allowedInterfaceList"]:
                allowedListList.append(a)
        else:
            allowedListList=["WAN"]

        vlanDns=[]
        if "dns" in vlan:
            for a in vlan["dns"]:
                vlanDns.append(a)
            # vlanDns=vlan["dns"]
        else:
            vlanDns=dns

        id=int(vlan["id"])

        ipPoolstart=""
        if "ipPoolStart" in vlan:
            ipPoolstart=vlan["ipPoolStart"]
        else:
            ip=id
            # ip=20+id
            ipPoolstart="192.168."+str(ip)+".30"

        name = vlan["name"] + "-" + str(id)
        setVlan(
            name=name, 
            id=id, 
            ipPoolStart=ipPoolstart, 
            dns=vlanDns,
            ports=ports, allowedList=allowedList, allowedListList=allowedListList, mngtVlan=mngtVlan)
    
    
    write('')
    write('/ip/firewall/filter/set [find comment="ohmi config"] disabled=yes' )
    f.close()
    return



def write(s:str)->None:
    f.write('%s\n' % (s) )


def cartouche(fromFile:str):
    write(  '#######################################################################################')
    write(  '# configuration generated by ohmi')
    write(  '#     script:makeVlan.py')
    write( ('#     Source: %s' % (fromFile) ) )
    write( ('#     on: %s' % (datetime.now().strftime("%Y/%m/%d %H:%M:%S") ) ) )
    write(  '#     you may want to issue :')
    write(  '#        /system reset-configuration')
    write(  '#        /ip/firewall/filter add action=accept chain=input dst-port=23 protocol=tcp place-before=2 comment="ohmi config"' )
    write(  '#' )
    write(  '#     to get wireguard public key issue /interface/wireguard print' )
    write(  '#     to set wireguard peer public key issue /interface/wireguard/peers/ set public-key="uHXS0oX5IPfuPbo28ztqAYfxLDGaggpfKOXYckF5nTc=" [find interface=wireguard1]' )
    write(  '#' )
    write(  '#######################################################################################')


def setBasis(name:str, psw:str):
    write('')
    write( '#########################' )
    write( '# Generic configuration' )
    write( '#########################' )
    write( ('/system identity set name="%s"' % (name) ) )
    write( ('/user/set [find name="admin"] password=%s' % (psw) ) )
    write( ('/interface bridge add name=%s protocol-mode=none vlan-filtering=no comment="%s"' % (trunkName, comment) ) )
    write( ('/interface list add name=VLAN comment="%s"' % (comment)) )
    # write( ('/ip/firewall/filter add action=accept chain=input dst-port=8291 protocol=tcp place-before=2 disabled=yes comment="%s winbox"' % (comment)) )
    # write( ('/ip/firewall/filter add action=accept chain=input dst-port=23 protocol=tcp place-before=2 disabled=yes comment="%s telnet"' % (comment)) )

    write( '/ip/cloud/set ddns-enabled=yes' )

    return

# reset lan
def setLan(ipPoolStart:str):
    interface = ipaddress.IPv4Interface(ipPoolStart+"/24")
    netAddr = interface.network.network_address
    rtrAddr = interface.network.network_address+1
    write('')
    write( '######################' )
    write( '# LAN configuration' )
    write( '######################' )
    write( ('/ip/pool/set [find name=default-dhcp] ranges=%s-%s comment="%s LAN"' % (ipPoolStart, interface.network.broadcast_address-1, comment)) )
    write( ('/ip/address/set [find comment="defconf"] address=%s/24 interface=bridge network=%s comment="%s LAN"' % (rtrAddr, netAddr, comment)) )
    write( ('/ip/dhcp-server/network/set [find comment="defconf"] address=%s/24 dns-server=%s gateway=%s netmask=24 comment="%s LAN"' % (netAddr, rtrAddr, rtrAddr ,comment)) )
    write( ('/ip/dns/static/set [find comment="defconf"] address=%s name=router.lan comment="%s LAN"' % (rtrAddr, comment)) )

def setWireguard(wireguardAdd:str):
    interface = ipaddress.IPv4Interface(wireguardAdd+"/24")
    write('')
    write( '############################' )
    write( '# wireguard configuration' )
    write( '############################' )
    write( ('/interface/wireguard add listen-port=13231 name=wireguard1 comment="%s wireguard"' % (comment)) )
    write( ('/ip/firewall/filter add action=accept chain=input dst-port=13231 protocol=udp place-before=2 comment="%s wireguard"' % (comment)) )
    write( ('/ip/address add address=%s/24 interface=wireguard1 network=%s comment="%s wireguard"' % (wireguardAdd, interface.network.network_address, comment)) )
    write( '/interface/wireguard/peers add allowed-address=10.10.0.2/32 interface=wireguard1 public-key="roadWariorPubKey" comment="routeur ohmi"' )
    return


# creation des lignes nécessaires au setup d'un VLAN
def setVlan(
        name:str, 
        id:int, 
        ipPoolStart:str, 
        mngtVlan:int,
        netmask:int=24, 
        dns=["8.8.8.8"],
        allowedList=[],
        allowedListList=[],
        ports=[],
        ):
    interface = ipaddress.IPv4Interface(ipPoolStart+"/"+str(netmask))

    l = ('#  vlan: %s id: %d' % (name, id) )
    lg = len(l) + 1
    sep = "#"
    sep = sep.replace(sep, sep[0]*lg, 1)
    write('')
    write(sep)
    write(l)
    write(sep)

    write(  '#  associate port and vlan')
    tagged=trunkName
    for port in ports:
        pvid=""
        if mngtVlan != -1:
            pvid = "pvid=" + str(mngtVlan)
        write( ('/interface bridge port set bridge=%s %s [find interface=%s] comment="%s"' % (trunkName, pvid, port, comment) ) )
        tagged = tagged + "," + port
    write( ('/interface bridge vlan set [find bridge=%s vlan-ids=%d] tagged=%s comment="%s"' % (trunkName, id, tagged, comment) ) )

    write(  '')
    write(  '#  vlan setup')
    write( ('/interface vlan add interface=%s name=%s_vl vlan-id=%s comment="%s"' % (trunkName, name, id, comment) ) )
    write( ('/ip address add interface=%s_vl address=%s/%d comment="%s"' % (name, interface.network[1], netmask, comment) ) )
    write( ('/ip pool add name=%s_pool ranges=%s-%s comment="%s"' % (name, ipPoolStart, interface.network.broadcast_address-1, comment) ) )
    write( ('/ip dhcp-server add address-pool=%s_pool interface=%s_vl name=%s_dhcp disabled=no comment="%s"' % (name, name, name, comment) ) )
    dnsList=""
    for elt in dns:
        if len(dnsList)>0:
            dnsList = dnsList+","
        dnsList = dnsList + elt
    write( ('/ip dhcp-server network add address=%s dns-server="%s" gateway=%s comment="%s"' % (interface.network, dnsList, interface.network[1], comment) ) )

    write( ('/interface list member add interface=%s_vl list=LAN comment="%s"' % (name, comment) ) )

    write(  '')
    write(  '#  firewall rules')
    for elt in allowedList:            
        write( ('/ip firewall filter add chain=forward action=accept in-interface=%s_vl out-interface=%s comment="%s"' % (name, elt, comment) ) )
    for elt in allowedListList:            
        write( ('/ip firewall filter add chain=forward action=accept in-interface=%s_vl out-interface-list=%s comment="%s"' % (name, elt, comment) ) )

    write( ('/ip firewall filter add chain=forward action=drop in-interface=%s_vl comment="%s"' % (name, comment) ) )

    return




main()

